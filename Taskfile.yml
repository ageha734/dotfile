version: '3'

output: prefixed

tasks:
    default:
        silent: true
        desc: Show available tasks
        prefix: '💡'
        cmds:
        - task --list

    setup:
        silent: true
        desc: Setup development environment
        deps:
        - setup:tools
        - setup:hooks

    setup:tools:
        internal: true
        silent: true
        desc: Install development tools via proto
        prefix: '🔧'
        sources:
        - .prototools
        cmds:
        - proto install
        generates:
        - ~/.proto/bin/commitlint
        - ~/.proto/bin/lefthook
        - ~/.proto/bin/dprint
        - ~/.proto/bin/task

    setup:hooks:
        internal: true
        silent: true
        desc: Install git hooks
        prefix: '🪝'
        sources:
        - lefthook.yml
        cmds:
        - lefthook install
        status:
        - test -f .git/hooks/pre-commit
        - test -f .git/hooks/commit-msg
        generates:
        - .git/hooks/pre-commit
        - .git/hooks/commit-msg

    apply:
        silent: true
        desc: Apply chezmoi configuration
        prefix: '👣'
        prompt: 'Are you sure you want to apply chezmoi configuration?'
        cmds:
        - chezmoi apply

    diff:
        silent: true
        desc: Show chezmoi diff
        prefix: '🎨'
        cmds:
        - chezmoi diff

    status:
        silent: true
        desc: Show chezmoi status
        prefix: '🎨'
        cmds:
        - chezmoi status

    update:
        silent: true
        desc: Update chezmoi from source
        prefix: '👷'
        cmds:
        - chezmoi update

    lint:
        silent: true
        desc: Check code formatting with dprint
        prefix: '🔍'
        sources:
        - '**/*.{json,toml,yaml,yml,md}'
        - dprint.json
        cmds:
        - dprint check

    format:
        silent: true
        desc: Format code with dprint
        prefix: '📝'
        sources:
        - '**/*.{json,toml,yaml,yml,md}'
        - dprint.json
        cmds:
        - dprint fmt

    git:commit:
        silent: true
        desc: Generate a commit message with Copilot and commit
        prefix: '📚'
        prompt: 'Are you sure you want to commit with GitHub Copilot?'
        cmds:
        - git add .
        - |
              if ! git diff --staged --quiet; then
                echo "📝 Generating a commit message with GitHub Copilot..."

                DIFF=$(git diff --staged)
                echo "🔍 Changes:"

                PROMPT="""
                Generate a git commit message for my changes. Follow the Conventional Commits specification strictly. The entire message must be a single line in the format: '<type>(<scope>): <subject>'.
                The changes are: $DIFF
                - The type must be one of: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert.
                - The scope is optional.
                - The subject must be in the imperative mood, start with a lowercase letter, and have no period at the end.
                - Provide only the single-line commit message itself, without any introduction or explanation.
                """

                COMMIT_MSG=$(gh copilot suggest "$PROMPT")

                echo "💬 Generated Message:"
                echo "   $COMMIT_MSG"
                git commit -m "$COMMIT_MSG"
                echo "✅ Committed successfully!"
              else
                echo "🤷 No changes staged for commit."
              fi

    git:log:
        silent: true
        desc: Show git log
        prefix: '📊'
        cmds:
        - git log --graph --oneline --all --decorate --date=short --abbrev-commit --pretty=format:'%Cblue%ad %C(auto)%h%Creset -%C(auto)%d%Creset %s %Cblue[%aN]%Creset %Cblue%G?%Creset'

    git:rm:his:
        silent: true
        desc: ⚠️ (DESTRUCTIVE) Remove a file from all history with pre/post verification.
        prefix: '🔥'
        summary: |
            This is a destructive operation that rewrites the entire repository history.
            It requires 'git-filter-repo' to be installed (`pip install git-filter-repo`).
            1. Pre-check: Aborts if the file is not found in git history.
            2. Rewrite: Removes the file from all commits using git-filter-repo.
            3. Post-check: Verifies the file has been removed from history and the current HEAD.
            4. Force Push: Pushes the rewritten history to the remote.

            Usage: task git:rm:his -- path/to/your/secret.file
        vars:
            FILE_PATH: '{{.CLI_ARGS}}'
        preconditions:
        - sh: command -v git-filter-repo
          msg: "git-filter-repo is not installed. Please run 'pip install git-filter-repo'."
        - sh: test -n "{{.FILE_PATH}}"
          msg: 'You must provide the path to the file you want to remove. Usage: task git:rm:his -- path/to/file'
        - sh: '[ $(git rev-list --all --count -- "{{.FILE_PATH}}") -gt 0 ]'
          msg: "✅ SKIPPED: File '{{.FILE_PATH}}' was not found in the entire Git history. Nothing to do."
        prompt: 'Are you sure you want to remove {{.FILE_PATH}} from all of history?'
        cmds:
        - |
              echo "🔥 Starting the process to remove '{{.FILE_PATH}}' from all of history..."
              echo "⚠️ THIS IS A DESTRUCTIVE OPERATION. The --force flag is used to run on a non-fresh clone."
        - git-filter-repo --invert-paths --path '{{.FILE_PATH}}' --force
        - |
              echo "✅ History rewriting complete."
              echo "🔍 Verifying removal..."
        - |
              if [ $(git rev-list --all --count -- "{{.FILE_PATH}}") -eq 0 ]; then
                echo "  -> ✅ VERIFIED: '{{.FILE_PATH}}' no longer exists in any commit history."
              else
                echo "  -> ❌ FAILED: '{{.FILE_PATH}}' was found in the commit history after removal."
                exit 1
              fi
        - |
              if ! git cat-file -e HEAD:'{{.FILE_PATH}}' 2>/dev/null; then
                echo "  -> ✅ VERIFIED: '{{.FILE_PATH}}' does not exist in the current HEAD."
              else
                echo "  -> ❌ FAILED: '{{.FILE_PATH}}' still exists in the current HEAD."
                exit 1
              fi
        - |
              echo "🚀 Verification successful. Force-pushing the new history to 'origin'..."
        - git push origin --force --all
        - git push origin --force --tags
        - |
              echo "🎉 Successfully pushed rewritten history to the remote repository."
              echo "🔴 IMPORTANT NEXT STEPS:"
              echo "1. Invalidate the leaked secret immediately."
              echo "2. Notify all collaborators about this history change."
              echo "3. Close the 'Secret scanning alert' on GitHub."

    clean:
        silent: true
        desc: Clean up temporary files
        prefix: '🧹'
        prompt: 'Are you sure you want to clean up temporary files?'
        cmds:
        - rm -rf .task/
        - git clean -fd
