# vim: ft=fish ts=4 sw=4 et
set fish_greeting "" # Setting to empty string is more common than `set fish_greeting` alone

# --- Fish Shell Configuration ---
set -g theme_color_scheme terminal-dark
set -g fish_prompt_pwd_dir_length 1
set -g theme_display_user yes
set -g theme_hide_hostname no
set -g theme_hostname always

# --- Core Settings & XDG ---
set -gx LC_ALL "en_US.UTF-8"
set -gx BASH_SILENCE_DEPRECATION_WARNING 1

set -q XDG_CONFIG_HOME || set -gx XDG_CONFIG_HOME $HOME/.config
set -q XDG_DATA_HOME || set -gx XDG_DATA_HOME $HOME/.local/share
set -g FISH_CONFIG_DIR $XDG_CONFIG_HOME/fish
set -g FISH_DATA_DIR $XDG_DATA_HOME/fish # Standard data directory
set -g FISH_CACHE_DIR $HOME/.cache/fish

# --- PATH Configuration (Order matters) ---
# xcode command line tools path (macOS specific)
fish_add_path --global (xcode-select -p)/usr/bin

# Homebrew (macOS specific)
set -gx HOMEBREW_BUNDLE_FILE $HOME/.Brewfile # For `brew bundle`
set -gx HOMEBREW_NO_AUTO_UPDATE 1          # Speeds up brew commands
fish_add_path --global /opt/homebrew/bin /opt/homebrew/sbin
fish_add_path $HOME/.local/bin
fish_add_path $HOME/.authz/bin

# --- SDKs & Dev Tools (Functions related to these are best in functions/ dir) ---
# PATHs - set them globally if they don't change
set -gx ANDROID_HOME $HOME/Library/Android/sdk
fish_add_path $ANDROID_HOME/platform-tools $ANDROID_HOME/emulator

# Flutter
set -gx FLUTTER_HOME $HOME/.flutter
fish_add_path $FLUTTER_HOME/bin

# libxml2 (These are build flags, usually not needed for shell startup speed directly unless sourced scripts use them heavily)
set -gx LDFLAGS "-L/opt/homebrew/opt/libxml2/lib"
set -gx CPPFLAGS "-I/opt/homebrew/opt/libxml2/include"
set -gx PKG_CONFIG_PATH "/opt/homebrew/opt/libxml2/lib/pkgconfig" # Use fish_add_path for PKG_CONFIG_PATH if it's a list
fish_add_path --prepend /opt/homebrew/opt/libxml2/bin # if it has binaries you use directly

# Node.js
set -gx NPM_CONFIG_PREFIX $HOME/.node_modules
fish_add_path $NPM_CONFIG_PREFIX/bin

# Python
if not set -q __my_python_version
    # Try to get version, redirect stderr to avoid clutter if python3 isn't there
    set -g __my_python_version (python3 --version 2>/dev/null | string match -r '\d+\.\d+' | head -n 1)
end

if test -n "$__my_python_version"
    set -gx PYTHONUSERBASE $HOME/.python
    set -gx PYTHONVERSION $__my_python_version
    set -gx PYTHONPATH $PYTHONUSERBASE/lib/python$PYTHONVERSION/site-packages
    fish_add_path $PYTHONUSERBASE/bin # Add to global path once
end

# Rustup & Cargo
set -gx RUSTUP_HOME $HOME/.rustup
set -gx CARGO_HOME $HOME/.cargo
fish_add_path $CARGO_HOME/bin

# Go
set -gx GOPATH $HOME/.go
fish_add_path $GOPATH/bin

# TiCloud
fish_add_path $HOME/.ticloud/bin
fish_add_path $HOME/.tiup/bin

# Mysql Client
fish_add_path /opt/homebrew/opt/mysql-client/bin

# Sqlite
fish_add_path /opt/homebrew/opt/sqlite/bin

# Nix
fish_add_path $HOME/.nix-profile/bin

# --- Misc Tools & Configs ---
set -gx LESSKEY $HOME/.config/less/less

# --- Shell Behavior Tweaks ---
set -U __done_min_cmd_duration 5000  # Universal var, set once
set -U fish_features qmark-noglob     # Universal var, set once

# --- SSH Agent ---
set -gx SSH_AUTH_SOCK $HOME/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh

# --- Config Caching for Expensive Initializations ---
set -l USER_CONFIG_FILE $FISH_CONFIG_DIR/config.fish # Main config file
set -l CACHED_INIT_SCRIPT $FISH_CACHE_DIR/cached_fish_init.fish # Specific name for this cache

#

# Regenerate cache if main config changes, or if cache file doesn't exist
if not test -f "$CACHED_INIT_SCRIPT" || test "$USER_CONFIG_FILE" -nt "$CACHED_INIT_SCRIPT"

    mkdir -p "$FISH_CACHE_DIR"
    # Start fresh
    echo "# Auto-generated by $USER_CONFIG_FILE on "(date) > "$CACHED_INIT_SCRIPT"

    # direnv hook
    if type -q direnv
        echo "direnv hook fish | source" >> "$CACHED_INIT_SCRIPT"
    end

    # atuin init
    if type -q atuin
        echo "set -gx ATUIN_NOBIND \"true\" # Disable default Atuin binds if using custom ones" >> "$CACHED_INIT_SCRIPT"
        # Ensure `atuin init fish` outputs to stdout for sourcing
        echo "atuin init fish --disable-up-arrow | source" >> "$CACHED_INIT_SCRIPT"
    end

    # github copilot for cli
    if type -q gh
        if test -f ~/.local/share/gh/extensions/gh-fish/gh-copilot-alias.fish
            echo "source ~/.local/share/gh/extensions/gh-fish/gh-copilot-alias.fish" >> "$CACHED_INIT_SCRIPT"
        end
    end

    # source GCloud SDK path (this is fine)
    if type -q gcloud
        if test -f "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc"
            source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.fish.inc" >> "$CACHED_INIT_SCRIPT"
        end
    end

    # starship prompt
    if type -q starship
        # Modern starship init should handle transience.
        echo "starship init fish --print-full-init | source" >> "$CACHED_INIT_SCRIPT"
    end

    set_color green --bold; echo "Fish: Cached initialization script updated at $CACHED_INIT_SCRIPT"; set_color normal
end

# --- Interactive Shell Setup ---
if status is-interactive
    # stty settings are fine
    stty stop undef &>/dev/null; or true
    stty start undef &>/dev/null; or true

    # proto: This is a critical point for startup speed.
    # `proto activate fish` can be slow.
    # Consider:
    # 1. Is it needed for *every* interactive shell?
    # 2. Can `proto env --fish | source` be faster if it only sets env vars?
    # 3. Lazy-loading: Wrap proto-managed tools in functions that run `proto use ...` first.
    if type -q proto
        # TIMING: You can time this specific part:
        # echo "Proto activation start: "(date +%s%N) >&2
        # proto activate fish | source
        # echo "Proto activation end: "(date +%s%N) >&2
        # For now, keeping it as is, but this is a prime candidate for optimization if shell is slow.
        proto activate fish | source
    end

    # --- Tmux Configuration & Auto-Launch ---
    # Check if our Terminal emulator is Ghostty
    if [ "$TERM" = "xterm-ghostty" ]
        set -l log_file "$HOME/.cache/ghostty.log"

        if [ ! -n "$TMUX" ]
            tmux new-session; exit # Changed '&&' to ';'
            tmux pipe-pane "cat >> $log_file"
        end
    end

    # Source the cached initializations if the file exists
    if test -f "$CACHED_INIT_SCRIPT"
        source "$CACHED_INIT_SCRIPT"
    else
        echo "Warning: Fish cached init script not found: $CACHED_INIT_SCRIPT" >&2
    end

    # Clear default greeting
    enable_transience
end

# Bat
if type -q bat
    set -gx BAT_PAGER "less -R"
    set -gx BAT_THEME "OneHalfDark"
    set -gx BAT_TABS 4
    set -gx BAT_STYLE "plain"
    set -gx BAT_PAGER "less -R"
    balias cat bat
end

# Lsd
if type -q lsd
    set -gx LSD_NO_OPTIONS true
    set -gx LSD_NO_CONFIG true
    set -gx LSD_NO_COLOR true
    set -gx LSD_NO_ICON true
    set -gx LSD_NO_HYPERLINKS true
    set -gx LSD_NO_EXA true
    balias ls lsd
    balias l lsd -l
    balias ll lsd -l
    balias la lsd -a
    balias lla lsd -la
    balias lt lsd --tree --classic
    balias tree lsd --tree
end

# Zoxide
if type -q zoxide
    set --universal zoxide_hook --on-event fish_prompt
end

# rip
if type -q rip
    set -g GRAVEYARD $HOME/.Trash
    balias rip rm
end

# Neovim
if type -q nvim
    set -gx EDITOR nvim
    set -gx GIT_EDITOR nvim
    set -gx VISUAL nvim
    set -gx MANPAGER "nvim -c ASMANPAGER -"
    balias v nvim
    balias vi nvim
    balias vim nvim
end

# Atuin
if type -q atuin
    # Ensure Atuin is initialized properly
    atuin init fish --disable-up-arrow | source
    set -gx ATUIN_NOBIND "true" # Disable default binds if using custom ones
    # Custom Atuin commands
    bind \ch _atuin_search
    bind -M insert \ch _atuin_search
    balias history _atuin_search
    balias search 'atuin search'
    balias add 'atuin add'
    balias clear 'atuin clear'
end
